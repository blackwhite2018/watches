{"version":3,"sources":["components/Watches/Form/Form.jsx","components/Watches/Clocks/Clock/Clock.jsx","components/Watches/Clocks/Clocks.jsx","components/Watches/Watches.jsx","App.jsx","serviceWorker.js","index.js"],"names":["defaultClock","name","zone","Form","handleAddClock","useState","clock","setClock","handleChange","target","value","prevValue","onSubmit","evt","preventDefault","htmlFor","type","onChange","id","Clock","state","handleRemove","props","handleRemoveClock","this","countId","setInterval","date","Date","hourse","getHours","minutes","getMinutes","seconds","getSeconds","setState","clearInterval","className","onClick","Component","Clocks","clocks","clockIds","map","_id","shortid","generate","key","Watches","setClocks","console","log","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ad0c7e6b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst defaultClock = {\r\n    name: '',\r\n    zone: 0\r\n};\r\n\r\nconst Form = ({ handleAddClock }) => {\r\n    const [clock, setClock] = useState(defaultClock);\r\n\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        setClock(prevValue => ({...prevValue, [name]: value}));\r\n    };\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        handleAddClock(clock);\r\n        setClock(defaultClock);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <label htmlFor=\"name\">Название</label>\r\n            <input type=\"text\" onChange={ handleChange } name=\"name\" id=\"name\" />\r\n            <label htmlFor=\"zone\">Временная зона</label>\r\n            <input type=\"text\" onChange={ handleChange } name=\"zone\" id=\"zone\" />\r\n            <input type=\"submit\" value=\"Добавить\" />\r\n        </form>\r\n    );\r\n};\r\n\r\nForm.propTypes = {\r\n    props: PropTypes.shape({\r\n        handleAddClock: PropTypes.func.isRequired\r\n    })\r\n};\r\n\r\nexport default Form;\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Clock extends Component {\r\n    state = {};\r\n\r\n    componentDidMount() {\r\n        this.countId = setInterval(() => {\r\n            const date = new Date();\r\n            const hourse = date.getHours() + this.props.clock.zone;\r\n            const minutes = date.getMinutes();\r\n            const seconds = date.getSeconds();\r\n\r\n            this.setState({ hourse, minutes, seconds });\r\n        }, 1000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.countId);\r\n    }\r\n\r\n    handleRemove = evt => {\r\n        this.props.handleRemoveClock(this.props.clock.name);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"clock\">\r\n                <div className=\"zone\">{ this.props.clock.name }</div>\r\n                <div className=\"time\">\r\n                    { `${ this.state.hourse ?? 0 }:${ this.state.minutes ?? 0 }:${ this.state.seconds ?? 0 }` }\r\n                </div>\r\n                <button type=\"button\" onClick={ this.handleRemove }>remove</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nClock.propTypes = {\r\n    props: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.number.isRequired\r\n    })\r\n};\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport Clock from './Clock/Clock';\r\n\r\nconst Clocks = ({ clocks, handleRemoveClock }) => {\r\n    const clockIds = [...clocks].map(clock => {\r\n        return {\r\n            _id: shortid.generate(),\r\n            ...clock\r\n        };\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {\r\n                clockIds.map(({ _id, name, zone }) => {\r\n                    return (\r\n                        <Clock \r\n                            key={ _id }\r\n                            clock={ { name, zone } }\r\n                            handleRemoveClock={ handleRemoveClock }   \r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nClocks.propTypes = {\r\n\r\n};\r\n\r\nexport default Clocks;\r\n\r\n","import React, { useState } from 'react';\r\nimport Form from './Form/Form';\r\nimport Clocks from './Clocks/Clocks';\r\n\r\nconst Watches = () => {\r\n    const [clocks, setClocks] = useState([\r\n        {\r\n            name: 'Moscow',\r\n            zone: 3\r\n        }\r\n    ]);\r\n\r\n    const handleAddClock = clock => {\r\n        console.log(clocks, clock)\r\n        setClocks(prevValue => [...prevValue, clock]);\r\n    };\r\n\r\n    const handleRemoveClock = name => {\r\n        setClocks(prevValue => {\r\n            return [...clocks].filter(clock => clock.name !== name);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                handleAddClock={ handleAddClock }\r\n            />\r\n            <Clocks\r\n                clocks={ clocks }\r\n                handleRemoveClock={ handleRemoveClock }\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Watches;\r\n\r\n","import React from 'react';\r\nimport Watches from './components/Watches/Watches';\r\n\r\nconst App = () => (\r\n    <div className=\"container\">\r\n        <Watches />\r\n    </div>\r\n);\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}